
aws s3 ls s3://gopi2398
aws s3 cp cam08Sep2021182510.png s3://gopi2398

aws s3 cp template_2.html s3://pdfilesipa_template/15/

s3cmd sync s3://https://pdfiles.s3.us-west-2.amazonaws.com/ipa_template/15/template_2.html /home/rituraj/ipa_testing/indTemp/

wget https://pdfiles.s3.us-west-2.amazonaws.com/ipa_template/15/template_2.html /home/rituraj/ipa_testing/indTemp/

aws s3api create-bucket --bucket my-bucket 

https://instances.vantage.sh/
aws ec2 describe-snapshots 
aws workspaces describe-workspaces
aws iam list-policies
aws ec2 describe-instances
aws ec2 describe-instances --query "Reservations[*].Instances[*].{Instance:InstanceId,Vpc:VpcId}" --region eu-west-3 > save.json
aws ec2 describe-instances --region us-east-1 > save.json
aws s3 cp filename s3://bucketname
aws s3 ls s3://bucketname
aws ec2 describe-instances --query "Reservations[*].Instances[*].{Instance:InstanceId,Subnet:SubnetId}" > output.json

aws s3 ls s3://Bucketname/foldername/ --recursive --human-readable --summarize --region 

s3://coc-testing/



aws s3 ls s3://rimteam --recursive --human-readable --summarize
aws s3 sync s3://nla-ecw s3://nla-ecw-vendoracces
aws ec2 describe-instances --query "Reservations[*].Instances[*].{Instance:InstanceId,Vpc:VpcId}" --region ap-southeast > ap-southeast.json

All region
for REGION in $(aws ec2 describe-regions --output text --query 'Regions[].[RegionName]') ; do echo $REGION && aws ec2 describe-snapshots --owner self --region $REGION --output json | jq '.Snapshots[] | select(.StartTime < "'$(date --date='-1 month' '+%Y-%m-%d')'") | [.Description, .StartTime, .SnapshotId]' ; done

echo "List of Running instances"
for REGION in $(aws ec2 describe-regions --output text --query 'Regions[].[RegionName]') ; do echo $REGION && aws ec2 describe-instances --query "Reservations[*].Instances[*].{PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,Name:Tags[?Key=='Name']|[0].Value,Type:InstanceType,Status:State.Name,VpcId:VpcId}" --filters Name=instance-state-name,Values=running --region $REGION; done
echo "list of stopped instances"
for REGION in $(aws ec2 describe-regions --output text --query 'Regions[].[RegionName]') ; do echo $REGION && aws ec2 describe-instances --query "Reservations[*].Instances[*].{PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,Name:Tags[?Key=='Name']|[0].Value,Type:InstanceType,Status:State.Name,VpcId:VpcId}" --filters Name=instance-state-name,Values=stopped --region $REGION; done

echo "List of IAM users"
aws iam list-users --output text | cut -f 6

echo "List of IAM Users with ID"
aws iam list-users

echo "List of access key"

aws iam list-access-keys

echo "List of Groups names"
aws iam list-groups

echo "List of security group"

#aws ec2 describe-security-groups

echo "List all AMI"
aws ec2 describe-images --filter "Name=is-public,Values=false" \--query 'Images[].[ImageId, Name]' \--output text | sort -k2

echo "List of all EBS volume"

for REGION in $(aws ec2 describe-regions --output text --query 'Regions[].[RegionName]') ; do echo $REGION && aws ec2 describe-volumes --filter "Name=status,Values=in-use" --query 'Volumes[*].{VolumeID:VolumeId,Size:Size,Type:VolumeType,AvailabilityZone:AvailabilityZone}' --region $REGION; done

echo "List of ec2"

for REGION in $(aws ec2 describe-regions --output text --query 'Regions[].[RegionName]') ; do echo $REGION && aws ec2 describe-instances     --filters Name=tag-key,Values=Name     --query 'Reservations[*].Instances[*].{Instance:InstanceId,AZ:Placement.AvailabilityZone,Name:Tags[?Key==`Name`]|[0].Value}'   --region $REGION; done

echo "Snap shot list"

aws ec2 describe-snapshots --owner-ids self  --query 'Snapshots[]'

echo "List of IAM user"
aws iam list-users --output text

echo "Total Number of IAM user"
aws iam list-users --output text | wc -l

echo "List of LIGHT SAIL"
aws lightsail get-bundles --region ap-south-1 --query 'bundles[].{price:price,cpuCount:cpuCount,ramSizeInGb:ramSizeInGb,diskSizeInGb:diskSizeInGb,bundleId:bundleId,instanceType:instanceType,supportedPlatforms:supportedPlatforms[0]}' --output text

echo "Total Number of Light sail"

echo "List of workspaces in Select region in aws configuration ap-southeast-1, eu-west-1"
aws workspaces describe-workspaces --output text

aws rds describe-db-clusters --include-share --query 'DBClusters[?Engine==`aurora`].{EV:EngineVersion, DBCI:DBClusterIdentifier, EM:EngineMode}' --output table --region us-east-1     





